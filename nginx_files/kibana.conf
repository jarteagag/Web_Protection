# limit the number of connections per single IP
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

# limit the number of requests for a given session
limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

server {
        listen 80 default_server;
        server_name 187.160.241.133
                test.skipficloud.com;
        add_header X-Frame-Options "SAMEORIGIN";

        ### Enable the "Server header response"
        server_tokens off; # removed pound sign
        more_set_headers 'Server: SKIPFI Web Protection';

        if ($request_method !~ ^(GET|HEAD|POST)$ )
        {
                return 405;
        }

        if ($blockedagent)
        {
                return 403;
        }
        # zone which we want to limit by upper values, we want limit whole server
        limit_conn conn_limit_per_ip 10;
        limit_req zone=req_limit_per_ip burst=10 nodelay;

        add_header X-XSS-Protection "1; mode=block";
        return 302 https://$server_name$request_uri;
}

### the https server
server {
        # listen on ssl, deliver with speedy if possible
        listen 172.16.120.10:443 ssl;
        server_name 187.160.241.133
                test.skipficloud.com;
        add_header X-Frame-Options "SAMEORIGIN";
        error_log  logs/dash_error.log;

        ### Enable the "Server header response"
        server_tokens off; # removed pound sign
        more_set_headers 'Server: SKIPFI Web Protection';

        if ($request_method !~ ^(GET|HEAD|POST)$ )
        {
                return 405;
        }

        if ($blockedagent)
        {
                return 403;
        }

        add_header X-XSS-Protection "1; mode=block";

        ### Authentication
        auth_basic           "Web Protection Dashboard";
        auth_basic_user_file /usr/local/nginx/.htpasswd;

        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA HIGH !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        location / {
                ModSecurityEnabled on;
                ModSecurityConfig modsec_includes.conf;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;

                proxy_pass http://127.0.0.1:5601;
                proxy_redirect off;

                # Socket.IO Support
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
        }

}